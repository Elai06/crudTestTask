// Code generated by MockGen. DO NOT EDIT.
// Source: crudTestTask/internal/repository (interfaces: DataBaseHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "crudTestTask/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataBaseHandler is a mock of DataBaseHandler interface.
type MockDataBaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaseHandlerMockRecorder
}

// MockDataBaseHandlerMockRecorder is the mock recorder for MockDataBaseHandler.
type MockDataBaseHandlerMockRecorder struct {
	mock *MockDataBaseHandler
}

// NewMockDataBaseHandler creates a new mock instance.
func NewMockDataBaseHandler(ctrl *gomock.Controller) *MockDataBaseHandler {
	mock := &MockDataBaseHandler{ctrl: ctrl}
	mock.recorder = &MockDataBaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBaseHandler) EXPECT() *MockDataBaseHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataBaseHandler) Create(arg0 repository.Data) (*repository.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*repository.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDataBaseHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataBaseHandler)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDataBaseHandler) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataBaseHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataBaseHandler)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockDataBaseHandler) Get(arg0 int64) (*repository.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*repository.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataBaseHandlerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBaseHandler)(nil).Get), arg0)
}

// Update mocks base method.
func (m *MockDataBaseHandler) Update(arg0 repository.Data) (*repository.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*repository.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDataBaseHandlerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataBaseHandler)(nil).Update), arg0)
}
